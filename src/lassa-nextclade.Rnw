\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage[margin=0.5in,top=1in,bottom=0.75in]{geometry}
\usepackage{amsmath}
\usepackage{booktabs}
\usepackage{longtable}
\usepackage{array}
\usepackage{multirow}
\usepackage[table]{xcolor}
\usepackage{wrapfig}
\usepackage{float}
\usepackage{colortbl}
\usepackage{pdflscape}
\usepackage{tabu}
\usepackage{threeparttable}
\usepackage{threeparttablex}
\usepackage[normalem]{ulem}
\usepackage{makecell}

\usepackage{multicol}
\usepackage{graphicx}

\usepackage{fancyhdr}
\pagestyle{fancy}
\lhead{Lassa notes: Nextclade}
\rhead{last update: \today}

\begin{document}

<<,echo=FALSE>>=
#opts_chunk$set(fig.width=6,fig.height=3.5,size="footnotesize",fig.align='center',cache=FALSE,echo=TRUE)
opts_chunk$set(fig.width = 6, fig.height = 3.5, size = "footnotesize", fig.align = "center", cache = FALSE, echo = FALSE, warning=FALSE, message=FALSE)
@


<<message=FALSE, warning=FALSE>>=
source("shared_functions.R")
@


\section*{Background}


\section*{Exploratory Graphics}

<<fig.width=8, fig.height=4>>=
# Download and decompress file
if (!file.exists("lassa/metadata_all.tsv")) {
  system("mkdir -p lassa")
  segments <- c("all")
  for (segment in segments) {
    file_name <- paste0("metadata_", segment, ".tsv")
    zst_file <- paste0(file_name, ".zst")
    url <- paste0("https://data.nextstrain.org/files/workflows/lassa/", segment, "/metadata.tsv.zst")
    system(paste0("curl -L ", url, " -o ", "lassa/", zst_file))
    system(paste0("zstd -d lassa/", zst_file, " -o lassa/", file_name))
  }
}

data <- readr::read_delim("lassa/metadata_all.tsv", delim="\t")
@


<<fig.width=8, fig.height=2.5>>=
# Add a second set of min-length filters for S segment
s_length <- 3400
perc_length <- c(1.0, 0.90, 0.8, 0.75, 0.70)*s_length
binwidth=100
percentage_y = 500

# Pass in the min-length filters for L segment
diagnostic_length_plot(
  data=data,
  approx_length = 7200,
  binwidth = binwidth,
  percentage_y = percentage_y
) +
  ggplot2::geom_vline(xintercept = perc_length, linetype = "dashed", color = "red") +
    ggplot2::annotate("text",
             x = perc_length + binwidth*1.5,
             y = rep(percentage_y, 5),
             label = paste0(round(perc_length), " (", c(100, 90, 80, 75, 70), "%)"),
             hjust = -0.1,
             angle = -90,
             size = 3,
             color = "darkgreen"
    )
@

<<fig.width=8, fig.height=3>>=
max_length <- max(data$length)
binwidth <- 100

data %>%
  ggplot(aes(x = length)) +
  geom_histogram(binwidth = binwidth, fill = "skyblue", color = "black") +
  theme_bw() +
  scale_x_continuous(
    breaks = c(seq(0, max_length, by = 1000), max_length),
    limits = c(0, max_length + 1)
  ) +
  labs(
    x = paste("Sequence lengths (binwidth=", binwidth,")", sep=""),
    y = "Count",
    title = paste("Sequence lengths (all data = ",nrow(data),")", sep="")
  ) +
  facet_grid(rows = vars(segment))

nonseg <- data %>% subset(segment=="")
@

<<fig.width=8, fig.height=3>>=
diagnostic_time_fill_plot(
  data=data,
  fill="lineage"
)
@

\newpage

\section*{L segment Nextclade Dataset}

<<fig.width=4, fig.height=2>>=
GPC_NEXTCLADE='~/Desktop/NEW/add-robust-gpc-nextclade-tree/ingest/results/l/nextclade.tsv'

data <- readr::read_delim(GPC_NEXTCLADE, delim="\t")
@


\section*{Alignment check}

<<fig.width=8, fig.height=2>>=

# Expand deletions
expanded_deletions <- data %>%
  select(., seqName, deletions) %>%
  subset(., !is.na(deletions)) %>%
  separate_longer_delim(., cols = deletions, delim=",") %>%
  mutate(deletions = map(deletions, function(x) {
    if (str_detect(x, "-")) {
      range <- as.numeric(str_split(x, "-", simplify = TRUE))
      return(as.character(seq(range[1], range[2])))
    } else {
      return(x)
    }
  })) %>%
  unnest(deletions) %>%
  mutate(
    deletions=as.numeric(deletions)
  )

expanded_deletions %>%
  ggplot(., aes(x=deletions)) +
  geom_histogram(binwidth = 10) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)
  ) +
  labs(title="Frequency of Deletions along the genome")
@

<<fig.width=8, fig.height=2>>=

# Expand deletions
expanded_insertions <- data %>%
  select(., seqName, insertions) %>%
  subset(., !is.na(insertions)) %>%
  separate_longer_delim(., cols = insertions, delim=",") %>%
  mutate(
    insertions = sub(":.*", "", insertions),
    insertions = as.numeric(insertions)
  )

expanded_insertions %>%
  ggplot(., aes(x=insertions)) +
  geom_histogram(binwidth = 10) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)
  ) +
  labs(title="Frequency of insertions along the genome")
@


<<fig.width=8, fig.height=2>>=
# Expand deletions
expanded_frameshifts <- data %>%
  select(., frameShifts) %>%
  subset(., !is.na(frameShifts)) %>%
  separate_longer_delim(., cols = frameShifts, delim=",") %>%
  group_by(frameShifts) %>%
  summarise(
    n=n()
  ) %>%
  arrange(., desc(n) )

kable(head(expanded_frameshifts, n=10), caption = "Top Frameshifts") %>%
    kable_styling(
      latex_options = c("hold_position", "striped")
    )
@

\noindent
\textbf{Missing Data}

<<echo=TRUE, eval=FALSE>>=
--scoreBias 300                # First 300 not penalized
--missingDataThreshold 3000    # Top threshold, scale the next set of missing data from 0 to 100
@

<<fig.width=4, fig.height=2>>=
data %>%
  ggplot(. , aes(x=clade, y=totalMissing)) +
  geom_violin() +
  geom_boxplot(width=0.5) +
  theme_bw()
@


\noindent
\textbf{Mixed Sites (M)}

<<echo=TRUE, eval=FALSE>>=
--mixedSitesThreshold 10 # More than this number of mixed sites results in a "bad" score
@

<<fig.width=4, fig.height=1.5>>=
data %>%
  ggplot(. , aes(x=clade, y=totalNonACGTNs)) +
  geom_violin() +
  geom_boxplot() +
  theme_bw() +
  labs(title="totalNonACGTNs", y="")
@


\newpage
\noindent
\textbf{Private Mutations}

<<echo=TRUE, eval=FALSE>>=
    "privateMutations": {
      "enabled": true,
      "typical": 8,
      "cutoff": 24,
      "weightLabeledSubstitutions": 4,
      "weightReversionSubstitutions": 6,
      "weightUnlabeledSubstitutions": 1
    },
@

<<fig.width=8, fig.height=3.5>>=
a_plot <- data %>%
  ggplot(. , aes(x=clade, y=privateNucMutations.totalLabeledSubstitutions)) +
  geom_violin() +
  geom_boxplot() +
  theme_bw() +
  labs(title="privateNucMutations.totalLabeledSubstitutions", y="")

b_plot <- data %>%
  ggplot(. , aes(x=clade, y=privateNucMutations.totalUnlabeledSubstitutions)) +
  geom_violin() +
  geom_boxplot() +
  theme_bw() +
  labs(title="privateNucMutations.totalUnlabeledSubstitutions", y="")

c_plot <- data %>%
  ggplot(. , aes(x=clade, y=privateNucMutations.totalReversionSubstitutions)) +
  geom_violin() +
  geom_boxplot() +
  theme_bw() +
  labs(title="privateNucMutations.totalReversionSubstitutions", y="")

d_plot <- data %>%
  ggplot(. , aes(x=clade, y=privateNucMutations.totalPrivateSubstitutions)) +
  geom_violin() +
  geom_boxplot() +
  theme_bw() +
  labs(title="privateNucMutations.totalPrivateSubstitutions", y="")

cowplot::plot_grid(a_plot, b_plot, c_plot, d_plot, ncol=2)
@

\noindent
\textbf{Mutation clusters}

<<eval=FALSE, echo=TRUE>>=
    "snpClusters": {
      "enabled": true,
      "windowSize": 100,
      "clusterCutOff": 6,
      "scoreWeight": 50
    },
@

<<fig.width=8, fig.height=3.5>>=
a_plot <- data %>%
  ggplot(. , aes(x=clade, y=totalSubstitutions)) +
  geom_violin() +
  geom_boxplot() +
  theme_bw() +
  labs(title="totalSubstitutions", y="")
b_plot <- data %>%
  ggplot(. , aes(x=clade, y=totalAminoacidSubstitutions)) +
  geom_violin() +
  geom_boxplot() +
  theme_bw() +
  labs(title="totalAminoacidSubstitutions", y="")
c_plot <- data %>%
  ggplot(. , aes(x=clade, y=totalAminoacidInsertions)) +
  geom_violin() +
  geom_boxplot() +
  theme_bw() +
  labs(title="totalAminoacidInsertions", y="")
d_plot <- data %>%
  ggplot(. , aes(x=clade, y=totalAminoacidDeletions)) +
  geom_violin() +
  geom_boxplot() +
  theme_bw() +
  labs(title="totalAminoacidDeletions", y="")
cowplot::plot_grid(a_plot, b_plot, c_plot, d_plot, ncol=2)
@


\newpage
\noindent
\textbf{Stop Codons}

<<eval=FALSE,echo=TRUE>>=
"stopCodons": {
      "enabled": true,
      "ignoredStopCodons": [
        {
          "geneName": "ORF8",
          "codon": 26
        },
        {
          "geneName": "ORF8",
          "codon": 67
        }
      ]
}
@

<<fig.width=8, fig.height=2>>=
data %>%
  ggplot(. , aes(x=clade, y=qc.stopCodons.totalStopCodons)) +
  geom_violin() +
  geom_boxplot() +
  theme_bw() +
  labs(title="qc.stopCodons.totalStopCodons", y="")
@


\noindent
\textbf{Frameshifts}

<<eval=FALSE,echo=TRUE>>=
    "frameShifts": {
      "enabled": true,
      "ignoredFrameShifts": [
        {
          "geneName": "ORF3a",
          "codonRange": {
            "begin": 256,
            "end": 276
          }
        },
        {
          "geneName": "ORF3a",
          "codonRange": {
            "begin": 258,
            "end": 276
          }
        }
      ]
    },
@

<<fig.width=8, fig.height=2>>=
data %>%
  ggplot(. , aes(x=clade, y=totalFrameShifts)) +
  geom_violin() +
  geom_boxplot() +
  theme_bw() +
  labs(title="totalFrameShifts", y="")
@





\end{document}